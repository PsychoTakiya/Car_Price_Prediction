# -*- coding: utf-8 -*-
"""Project 7 - Car Price Prediction using Linear Regression - Ayush Prasad Gupta.ipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-oTgQlYRUf687610DDSd1wiPa7YPfsdV
"""

import pandas as pd
import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Car%20Price.csv')

df.head()

df.info()

df.describe()

df[['Brand']].value_counts()

df[['Model']].value_counts()

df[['Fuel']].value_counts()

df[['Seller_Type']].value_counts()

df[['Transmission']].value_counts()

df[['Owner']].value_counts()

df.shape

df.columns

df.replace({'Fuel': {'Petrol':0, 'Diesel':1, 'CNG':2, 'LPG':3, 'Electric':4 }},inplace = True)

df.replace({'Seller_Type': {'Individual':0, 'Dealer':1, 'Trustmark Dealer':2 }},inplace = True)

df.replace({'Transmission': {'Manual':0, 'Automatic':1 }},inplace = True)

df.replace({'Owner': {'First Owner':0, 'Second Owner':1,'Third Owner':2,'Fourth & Above Owner':3,'Test Drive Car':4 }},inplace = True)

y = df['Selling_Price']

y.shape

y

x = df[['Year', 'KM_Driven', 'Fuel',
       'Seller_Type', 'Transmission', 'Owner']]

x.shape

x

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3, random_state = 2529)
x_train.shape, x_test.shape, y_train.shape, y_test.shape

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(x_train,y_train)

y_pred =lr.predict(x_test)

y_pred.shape

y_pred

from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error, r2_score

mean_squared_error(y_test, y_pred)

mean_absolute_error(y_test,y_pred)

r2_score(y_test, y_pred)

import matplotlib.pyplot as plt
plt.scatter(y_test,y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Predicted Price")
plt.show()

df_new = df.sample(1)

df_new

df_new.shape

x_new = df_new.drop(['Brand',	'Model'	,'Selling_Price'], axis=1)

y_pred_new = lr.predict(x_new)

y_pred_new